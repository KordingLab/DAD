function [Vout,resid] = minKL_grid3D(V,X,gridsz)
% minimize KL (rotation + scaling) over a normalized grid
% input = V >> test dataset
% input = X >> kinematics data (target distribution)
% input = angVals 

% angVals = 180;

%% Step 1. 

% Normalize both target and source embeddings
Xn = normal(X);
Vn = normal(V);

% Add "blur" to target data
nums=50; nzvar = 0.1;
Ntmp = size(X,1)*nums;
X2 = zeros(Ntmp,3);
for i=1:size(X,1)
    X2((i-1)*nums+1:i*nums,:) = repmat(Xn(i,:),nums,1)+randn(nums,3)*nzvar;
end
Xn = normal(X2);

[Vout,resid] = conefit3(Xn,Vn,gridsz); % random restarts for cone angle
   

Result = minKL_grid(Vout(:,1:2),Xn(:,1:2),linspace(0,360,180),linspace(0.8,1.2,10),'KL',5,5);
Xnew = Results.Xrec;


% minKLgrid in 2D
%Results = minKL_grid(Vout(:,1:2),Xn(:,1:2),angVals,sVals,method,k,numsol);
%Results.Vicp = Vout;
%Results.V = Vn;
%Results.nmdiff = nmdiff;


end % end main function



